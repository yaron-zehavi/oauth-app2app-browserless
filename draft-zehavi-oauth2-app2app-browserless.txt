



Network Working Group                                          Y. Zehavi
Internet-Draft                                                  H. Kroll
Intended status: Standards Track                               G. Hyseni
Expires: 8 November 2025                   Raiffeisen Bank International
                                                              7 May 2025


                   OAuth 2.0 App2App Browserless Flow
             draft-zehavi-oauth2-app2app-browserless-latest

Abstract

   This document defines a protocol enabling native apps from different
   app publishers, using the App2App pattern to act as OAuth Client And
   Authorization Server, native browserless user navigation.

   The native experience is retained also when the Client uses any
   number of brokers to federate across trust networks, while retaining
   highest levels of security.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at https://yaron-
   zehavi.github.io/oauth-app2app-browserless/draft-zehavi-oauth2-
   app2app-browserless.html.  Status information for this document may
   be found at https://datatracker.ietf.org/doc/draft-zehavi-oauth2-
   app2app-browserless/.

   Source for this draft and an issue tracker can be found at
   https://github.com/yaron-zehavi/oauth-app2app-browserless.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Difference from OpenID.Native-SSO
     1.2.  Terminology
   2.  Conventions and Definitions
   3.  Challenge of App2App with Brokers
     3.1.  App2App with Brokers - Flow Diagram
     3.2.  App2App with brokers requires a web browser
     3.3.  Impact of using a web browser
   4.  App2Web
   5.  Browser-less App2App with Broker
     5.1.  Flow Diagram
     5.2.  Protocol flow
       5.2.1.  Client App traverses Brokers with request
       5.2.2.  Processing by User-Interacting Authorization Server
       5.2.3.  Client App traverses Brokers in reverse order
       5.2.4.  Client App obtains response
   6.  Security Considerations
     6.1.  OAuth request forgery and manipulation
     6.2.  Secure Native application communication
     6.3.  Deep link hijacking
     6.4.  Open redirection
     6.5.  Authorization code theft and injection
     6.6.  Handling of Cookies
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This document, OAuth 2.0 App2App Browserless Flow (Native App2App),
   discusses applications from different issuers that act as OAuth 2.0
   Client and Authorization Server, following the [App2App] pattern, to
   achieve native authentication and authorization.

   This specification addresses the challenge arising when a Client App
   reaches the User-Authenticating Authorization Server's app through
   one or more brokering Authorization Servers.

   Since OAuth Brokers's urls are not owned by any apps as deep links,
   App2App flows through brokers require using a web browser, which
   degrades the user experience.

   This document presents a protocol enabling native App2App browser-
   less navigation, through any number of brokers, without compromising
   on any security property.

1.1.  Difference from [OpenID.Native-SSO]

   [OpenID.Native-SSO] also offers a native SSO flow across applications
   without requiring the browser.  However, it is dealing with the
   specific sub-case when both apps are published by the same issuer and
   leverage this fact to share information.

1.2.  Terminology

   In addition to the terms defined in referenced specifications, this
   document uses the following terms:

   "OAuth":  In this document, "OAuth" refers to OAuth 2.0, [RFC6749]
      and [RFC6750] as well as [OpenID] referring to their
      *authorization code flow*.

   For consistency and readability, it shall use OAuth terminology -
   *Client* and *Authorization Server*, equally interchangeable with
   OpenID Connect *Relying Party* and *OpenID Provider* when OpenID
   Connect is used.

   "PKCE":  Proof Key for Code Exchange (PKCE) [RFC7636], a mechanism to
      prevent various attacks on OAuth authorization codes.

   "OAuth Broker":  A component acting as an Authorization Server for
      its clients, as well as an OAuth Client towards Downstream
      Authorization Servers.  Brokers are used to facilitate a trust
      relationship when there is no direct relation between an OAuth
      Client and the final Authorization Server where end-user
      authenticates and authorizes.  Brokers are an established pattern
      for establishing trust in federation use cases, such as in
      Academia and in the business world across corporations.  Brokers
      may be replaced in the future with dynamic trust establishment
      leveraging [OpenID.Federation].

   "Client App":  Native app implementing [RFC8252] as OAuth client of
      Primary Broker, and whose redirect_uri is claimed as a deep link.

   "Primary Broker":  An OAuth Broker serving as Authorization Server of
      Client App. Which is also an OAuth client of a Downstream
      Authorization Server.  Primary Broker performs additional handling
      for App2App use-case, covered in Section 5.2.

   "Downstream Authorization Server":  An Authorization Server which may
      be a _Secondary Broker_ or a _User-Interacting Authorization
      Server_.

   "Secondary Broker": :A Broker redirecting the flow, which does not
   perform user authentication and authorization.

   "User-Interacting Authorization Server":  The Authorization Server
      which interacts with end-user to perform authentication and
      authorization.  May or may not offer App2App via a native app
      claiming it's urls as deep links.  Such app may or may not be
      installed on end-user's device.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Challenge of App2App with Brokers

3.1.  App2App with Brokers - Flow Diagram

+------------------------------------------------------------------------------------+
|                                                                                    |
|  +--------------+                                                                  |
|  |              |                           Mobile Browser                         |
|  |  Client App  |     +--------------------------------------------------------+   |
|  |              |     |                                                        |   |
|  +--------------+     | +---------+       +--------+       +-----------------+ |   |
|             |         | |         |       |        |       |                 | |   |
|             +---------->| Primary |------>|        |------>|     User-       | |   |
|         Authorization | | Broker  | Auth. |        | Auth. | Authenticating  | |   |
|           Request     | +---------+ Req.  +--------+ Req.  |  Authorization  | |   |
|                       |                   Secondary        |     Server      | |   |
|  +--------------+     |                   Brokers          +-----------------+ |   |
|  |              |     |                                            |           |   |
|  |     User-    |     +--------------------------------------------|-----------+   |
|  |Authenticating|                                                  |               |
|  |      App     |<-------------------------------------------------+               |
|  +--------------+           Deep Link                                              |
+------------------------------------------------------------------------------------+
                                     Mobile Device

              Figure 1: App2App with brokers and browser

3.2.  App2App with brokers requires a web browser

   Since OAuth Brokers reside on web domains which no native app claims
   as Deep Links, OAuth requests to Brokers and responses to Broker's
   redirect_uri will be handled by a web browser.

3.3.  Impact of using a web browser

   Using a web browser downgrades the user experience in several ways.
   The browser may be noticed by end-user as it is loading urls and
   redirecting to native apps.

   The browser may prompt end-user for consent before opening deep
   links, introducing additional friction.

   App developers have limited control as to which browser will be
   opened on the return redirect to the Broker, so any cookies used to
   bind session identifiers (nonce, state or PKCE verifier) to the user
   agent may be lost, causing the flow to break.

   Finally, the browser may be left after the flow ends with "orphan"
   browser tabs used for redirection.  While these do not impact the
   process directly, they can be seen as clutter which degrades the
   overall UX's cleanliness.

4.  App2Web

+--------------------------------------------------------------------------------+
|                                                                                |
| +-----------+                                                                  |
| |           |                                                                  |
| |   Client  |                          Mobile Browser                          |
| |    App    | +--------------------------------------------------------------+ |
| |           | |                                                              | |
| +-----------+ | +---------+       +----------+       +--------------------+  | |
|         |     | |         |       |          |       |                    |  | |
|         +------>| Primary |------>|Secondary |------>|       User-        |  | |
|  Authorization| | Broker  | Auth. | Brokers  | Auth. |   Authenticating   |  | |
|  Request      | +---------+ Req.  +----------+ Req.  |   Authorization    |  | |
|               |                                      |        Server      |  | |
|               |                                      +-+----------------+-+  | |
|               |                                        |     User-      |    | |
|               |                                        | Authenticating |    | |
|               |                                        |     Web UI     |    | |
|               |                                        +----------------+    | |
|               +--------------------------------------------------------------+ |
+--------------------------------------------------------------------------------+
                                     Mobile Device

                    Figure 2: App2Web with brokers

   Whenever the user's device does not have an app owning the User-
   Authenticating Authorization Server's urls as deep links, the flow
   requires the help of a browser.

   This is the case when the User-Authenticating Authorization Server
   offers no native app, or when such an app exists but is not installed
   on the end-user's device.

   This is similar to the flow described in [RFC8252], and referred to
   in [App2App] as *App2Web*.

5.  Browser-less App2App with Broker

5.1.  Flow Diagram

   +------------------------------------------------------------+
   |               12. Exchange code for tokens   +----------+  |
   |             +------------------------------->|          |  |
   |             |                                |          |  |
   | +---------------+   1. Native GET Auth. Req. |          |  |
   | |               |    (scope=app2app)         |          |  |
   | |               |--------------------------->| Primary  |  |
   | |   Client App  |<---------------------------| Broker   |  |
   | |               |   2. Downstream Auth. Req. +----------+  |
   | +---------------+     (scope=app2app:client_app_deep_link) |
   |  ^ |    ^ | ^ |                                            |
   |  | |    | | | |                                            |
   |  | |    | | | |3. Loop thru Brokers until deep link        |
   |  | |    | | | |reached: Native GET Auth. Req.+----------+  |
   |  | |    | | | +----------------------------->|Secondary |  |
   |  | |    | | +--------------------------------| Brokers  |  |
   |  | |    | |          4. Redirect Directive   |          |  |
   |  | |    | |                                  |          |  |
   |  | |    | |10. Loop thru Brokers until own   |          |  |
   |  | |    | |deep link reached: Native GET redirect_uri   |  |
   |  | |    | +--------------------------------->|          |  |
   |  | |    +------------------------------------|          |  |
   |9.| | 5. Invoke      11. Redirect Directive   +----------+  |
   |  | v    Deep Link                                          |
   | +----------------+ 6. Authenticate & Authorize User        |
   | |      User-     | 7. Identify app2app mode                |
   | | Authenticating | 8. Establish trust in                   |
   | |       App      |    client_app_deep_link                 |
   | +----------------+ 9. Invoke client_app_deep_link with     |
   |                       redirect_uri                         |
   +------------------------------------------------------------+
                            Mobile Device

                 Figure 3: Browser-less App2App with Broker

5.2.  Protocol flow

   1.  Client App calls Primary Broker  Client App calls Primary
          Broker's authorization_endpoint to initiate an authorization
          code flow, indicating App2App flow by use of a dedicated scope
          such as app2app.  Client App's redirect_uri is claimed as a
          deep link and will be referred to as _client_app_deep_link_.

   2.  Primary Broker returns authorization request to Downstream
       Authorization Server  Primary Broker validates Client's request
          and prepares an authorization request to Downstream
          Authorization Server's authorization_endpoint.  Primary Broker
          provides _client_app_deep_link_ to Downstream Authorization
          Server in the dedicated structured scope:
          app2app:*client_app_deep_link*. Primary Broker responds with
          HTTP 302 and the authorization request url towards Downstream
          Authorization Server in the Location header.

5.2.1.  Client App traverses Brokers with request

   Client App uses OS mechanisms to detect if the authorization request
   URL it received is handled by an app installed on the device.

   If so, Client App natively invokes the app to process the
   authorization request, achieving from the user's perspective native
   navigation across applications.

   If an app handling the authorization request URL is not found, Client
   App natively calls the authorization request URL using HTTP GET and
   processes the response:

   *  If the response is successful (HTTP Code 2xx), it is probably the
      User-Interacting Authorization Server.  This means the Client App
      "over-stepped" and needs to downgrade to App2Web.

   *  If the response is a redirect instruction (HTTP Code 3xx +
      Location header), a Secondary Broker was reached and Client App
      repeats the logic previously described:

      -  Check if an app owns the obtained url, and if so natively
         invoke it.

      -  Otherwise natively call the obtained url and analyze the
         response.

   *  Handles error response (HTTP 4xx / 5xx) for example by displaying
      the error.

   As the Client App traverses through Brokers, it maintains a list of
   all the domains it traverses, which shall serve as the Allowlist when
   later traversing the response.

5.2.1.1.  Secondary Brokers

   Secondary Brokers engaged in the journey need to retain structured
   scope app2app:*client_app_deep_link* in downstream authorization
   requests they create.

5.2.1.2.  Note - Downgrade to App2Web

   If Client App reaches a User-Interacting Authorization Server with no
   app handling its urls, it may not be possible to relaunch the last
   authorization request URL on the browser as it might have included a
   single use request_uri which by now has been used and is therefore
   invalid.

   In such a case the Client App needs to start over, generating a new
   authorization request without App2App indication.

   This request is then launched on the browser.

   The remaining flow follows [RFC8252] and is therefore not further
   elaborated in this document.

5.2.2.  Processing by User-Interacting Authorization Server

   The User-Interacting Authorization Server processes the authorization
   request using its native app:

   *  Native app displays the UI for user authentication and
      authorization.

   *  The _client_app_deep_link_ provided in the strcutured scope,
      overrides the request's original redirect_uri:

      -  User-Interacting Authorization Server's native app validates
         that an app owning _client_app_deep_link_ is on the device

      -  If so it natively invokes it, handing it the redirect url with
         its response parameter

      -  If such an app does not exist it is an error and the flow
         terminates

   *  To establish trust towards client_app_deep_link, User-Interacting
      Authorization Server shall use OpenID Federation:

      -  Strips url path from _client_app_deep_link_ (retaining the
         domain).

      -  Adds /.well-known/openid-federation and performs trust chain
         resolution.

      -  Inspects Client's metadata for redirect_uri's and validates
         _client_app_deep_link_ is included.

5.2.3.  Client App traverses Brokers in reverse order

   Client App is invoked by User-Interacting Authorization Server App
   with a url as parameter which is the request's redirect_uri.

   Client App validates this url, and any url later obtained as a 3xx
   redirect instruction from the brokers it traverses, against the
   Allowlist it previously generated and fails if any url is not
   included in the Allowlist.

   Client App invokes the url it received using HTTP GET:

   *  If the response is a redirect instruction (HTTP Code 3xx +
      Location header), Client App repeats the logic and proceeds to
      call obtained urls until reaching its own redirect_uri
      (_client_app_deep_link_).

   *  Otherwise (HTTP Code 2xx / 4xx / 5xx) is a failure.

5.2.4.  Client App obtains response

   Once Client App's own redirect_uri is obtained in a redirect 3xx
   directive, Client App proceeds according to OAuth to exchange code
   for tokens or handle error responses.

6.  Security Considerations

6.1.  OAuth request forgery and manipulation

   It is recommended Client App shall be a confidential OAuth client.

6.2.  Secure Native application communication

   If Client App uses a Backend it is recommended to communicate with it
   securely:

   *  Use TLS recommended version and ciphers.

   *  Use DNSSEC.

   *  Perform certificate pinning.

6.3.  Deep link hijacking

   It is recommended that all apps in this specification shall protect
   their deep links using Android universal links / iOS App Links
   including the most specific package identifiers to prevent deep link
   hijacking by malicious apps.

6.4.  Open redirection

   Client App constructs an Allowlist of domains it traverses through
   while processing the request, for enforcing urls it shall later
   traverse through during response processing.  This serves to mitigate
   open redirection attacks as urls outside of this Allowlist will be
   rejected.

   In addition Client App should ignore any invocation for response
   processing which is not in the context of a request it initiated.
   One way to achieve this is by treating the Allowlist as a single-use
   object and destruct it after each protocol flow ends.

   Client App should allow only one OAuth request processing at a time.

6.5.  Authorization code theft and injection

   It is recommended that PKCE is used and that the code_verifier is
   tied to the Client App instance.

6.6.  Handling of Cookies

   It can be assumed that Authorization Servers will use Cookies to bind
   security elements (state, nonce, PKCE) to the user agent, and will
   break if these cookies are later missing.

   Therefore, Client App needs to handle Cookies as a web browser would:

   *  Store cookies it obtains on HTTP responses.

   *  Send cookies on subsequent HTTP requests to servers that returned
      cookies.

7.  IANA Considerations

   This document has no IANA actions.

8.  References

8.1.  Normative References

   [OpenID]   Sakimura, N., Bradley, J., Jones, M. B., de Medeiros, B.,
              and C. Mortimore, "OpenID Connect Core 1.0", November
              2014,
              <https://openid.net/specs/openid-connect-core-1_0.html>.

   [OpenID.Federation]
              Hedberg, Ed, R., Jones, M. B., Solberg, A. A., Bradley,
              J., De Marco, G., and V. Dzhuvinov, "OpenID Federation
              1.0", March 2025,
              <https://openid.net/specs/openid-federation-1_0.html>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6750>.

   [RFC7636]  Sakimura, N., Ed., Bradley, J., and N. Agarwal, "Proof Key
              for Code Exchange by OAuth Public Clients", RFC 7636,
              DOI 10.17487/RFC7636, September 2015,
              <https://www.rfc-editor.org/rfc/rfc7636>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8252]  Denniss, W. and J. Bradley, "OAuth 2.0 for Native Apps",
              BCP 212, RFC 8252, DOI 10.17487/RFC8252, October 2017,
              <https://www.rfc-editor.org/rfc/rfc8252>.

   [RFC9126]  Lodderstedt, T., Campbell, B., Sakimura, N., Tonge, D.,
              and F. Skokan, "OAuth 2.0 Pushed Authorization Requests",
              RFC 9126, DOI 10.17487/RFC9126, September 2021,
              <https://www.rfc-editor.org/rfc/rfc9126>.

8.2.  Informative References

   [App2App]  Heenan, J., "Guest Blog: Implementing App-to-App
              Authorisation in OAuth2/OpenID Connect", October 2019,
              <https://openid.net/guest-blog-implementing-app-to-app-
              authorisation-in-oauth2-openid-connect/>.

   [OpenID.Native-SSO]
              Fletcher, G., "OpenID Connect Native SSO for Mobile Apps",
              November 2022, <https://openid.net/specs/openid-connect-
              native-sso-1_0.html>.

Acknowledgments

   The authors would like to thank the attendees of the OAuth Security
   Workshop 2025 session in which this was discussed, as well as the
   following individuals who contributed ideas, feedback, and wording
   that shaped and formed the final specification:

Authors' Addresses

   Yaron Zehavi
   Raiffeisen Bank International
   Email: yaron.zehavi@rbinternational.com


   Henrik Kroll
   Raiffeisen Bank International
   Email: henrik.kroll@rbinternational.com


   Grese Hyseni
   Raiffeisen Bank International
   Email: grese.hyseni@rbinternational.com
