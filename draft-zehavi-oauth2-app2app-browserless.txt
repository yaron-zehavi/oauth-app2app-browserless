



Web Authorization Protocol                                     Y. Zehavi
Internet-Draft                                                  H. Kroll
Intended status: Standards Track                               G. Hyseni
Expires: 7 November 2025                   Raiffeisen Bank International
                                                              6 May 2025


                   OAuth 2.0 App2App Browserless Flow
             draft-zehavi-oauth2-app2app-browserless-latest

Abstract

   This document defines a protocol enabling native apps from different
   app publishers, using the App2App pattern to act as OAuth Client And
   Authorization Server, native browserless user navigation.  The native
   experience is retained also when the Client uses any number of
   brokers to federate across trust networks, while retaining highest
   levels of security.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://drafts.oauth.net/oauth-app2app-browserless/draft-ietf-oauth-
   app2app-browserless.html.  Status information for this document may
   be found at https://datatracker.ietf.org/doc/draft-zehavi-oauth2-
   app2app-browserless/.

   Discussion of this document takes place on the Web Authorization
   Protocol Working Group mailing list (mailto:oauth@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/oauth/.
   Subscribe at https://www.ietf.org/mailman/listinfo/oauth/.

   Source for this draft and an issue tracker can be found at
   https://github.com/oauth-wg/oauth-app2app-browserless.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 7 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Note
   2.  Conventions and Definitions
   3.  Terminology
   4.  Challenge of App2App with Brokers
     4.1.  TODO Arch Diagram
     4.2.  OAuth 2.0 / OpenID Connect Broker
     4.3.  App2App with brokers requires a web browser
     4.4.  Impact of using a web browser
     4.5.  App2Web
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This document, OAuth 2.0 App2App Browserless Flow (Native App2App),
   deals with applications from different issuers that act as OAuth 2.0
   Client and Authorization Server, following the [App2App] pattern, to
   achieve native authentication and authorization.

   This specification tackles the challenge when a Client App reaches
   the Authorization Server's app by redirecting through one or more
   brokering Authorization Servers, as it is not a direct client of the
   User-Authenticating Authorization Server.

   Since such brokers perform redirection and federation using solely
   HTTP 3xx redirect instructions, no app on the users mobile device
   handles their urls as deep links and therefore App2App flows through
   brokers require using a web browser, which degrades the user
   experience.

   This document presents a protocol enabling native App2App browser-
   less navigation, through any number of brokers, without compromising
   on any security property.

1.1.  Note

   [OpenID.Native-SSO] also offers a native SSO flow across applications
   without requiring the browser.  However it is dealing with the
   specific sub-case when both apps are published by the same issuer and
   leverage this fact to share information.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Terminology

   This document is relevant for both [RFC6749] and [OpenID] as the
   protocols used, referring to both's *authorization code flow*.

   For consistency and readability, it shall use [RFC6749] terminology -
   *Client* and *Authorization Server*, equally interchangeable with
   [OpenID] *Relying Party* and *OpenID Provider* when [OpenID] is used.

4.  Challenge of App2App with Brokers

4.1.  TODO Arch Diagram

4.2.  OAuth 2.0 / OpenID Connect Broker

   A broker is a component acting as Authorization Server for its
   clients, as well as an OAuth 2.0 Client towards downstream
   Authorization Servers.  Brokers are used when there is no direct
   relation between an OAuth Client and the Authorization Server where
   the end-user authenticates and authorizes.  This is relevant in
   federation use cases, such as in Academia and in the business world
   connecting across subsidiaries or B2B relationships across
   corporations.  Some of the trust requirements may be solved in the
   future with [OpenID.Federation], but federation through Brokers is an
   established pattern currently in broad use.

4.3.  App2App with brokers requires a web browser

   Since OAuth 2.0 brokers reside on https domains, which no native app
   claims as Deep Links, OAuth requests to Brokers and responses to
   Broker's redirect_uri will be handled by a web browser.

4.4.  Impact of using a web browser

   Using a web browser downgrades the user experience in several ways.
   The browser may be noticed by end-user as it is loading urls and
   redirecting to native apps.  The browser may prompt end-user for
   consent before opening deep links, introducing additional friction.
   App developers have limited control as to which browser will be
   opened on the return redirect to the Broker, so any cookies used to
   bind session identifiers (nonce, state or pkce verifier) to the user
   agent may be lost, causing the flow to break.  Finally, the browser
   may be left after the flow ends with "orphan" browser tabs used for
   redirection.  While these do not impact the process directly, they
   can be seen as clutter which degrades the overall UX's cleanliness.

4.5.  App2Web

   Whenever the user's device has no app owning the User-Authenticating
   Authorization Server's urls as deep links, the flow requires the help
   of a browser.

   This is the case when the User-Authenticating Authorization Server
   offers no native app, or when such an app exists but is not installed
   on the end-user's device.

   This is similar to the flow described in [RFC8252], and referred to
   in [App2App] as App2Web.

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  References

7.1.  Normative References

   [OpenID]   Sakimura, N., Bradley, J., Jones, M. B., de Medeiros, B.,
              and C. Mortimore, "OpenID Connect Core 1.0", November
              2014,
              <https://openid.net/specs/openid-connect-core-1_0.html>.

   [OpenID.Federation]
              Hedberg, Ed, R., Jones, M. B., Solberg, A. A., Bradley,
              J., De Marco, G., and V. Dzhuvinov, "OpenID Federation
              1.0", March 2025,
              <https://openid.net/specs/openid-federation-1_0.html>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC7636]  Sakimura, N., Ed., Bradley, J., and N. Agarwal, "Proof Key
              for Code Exchange by OAuth Public Clients", RFC 7636,
              DOI 10.17487/RFC7636, September 2015,
              <https://www.rfc-editor.org/rfc/rfc7636>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8252]  Denniss, W. and J. Bradley, "OAuth 2.0 for Native Apps",
              BCP 212, RFC 8252, DOI 10.17487/RFC8252, October 2017,
              <https://www.rfc-editor.org/rfc/rfc8252>.

   [RFC9126]  Lodderstedt, T., Campbell, B., Sakimura, N., Tonge, D.,
              and F. Skokan, "OAuth 2.0 Pushed Authorization Requests",
              RFC 9126, DOI 10.17487/RFC9126, September 2021,
              <https://www.rfc-editor.org/rfc/rfc9126>.

7.2.  Informative References

   [App2App]  Heenan, J., "Guest Blog: Implementing App-to-App
              Authorisation in OAuth2/OpenID Connect", October 2019,
              <https://openid.net/guest-blog-implementing-app-to-app-
              authorisation-in-oauth2-openid-connect/>.

   [OpenID.Native-SSO]
              Fletcher, G., "OpenID Connect Native SSO for Mobile Apps",
              November 2022, <https://openid.net/specs/openid-connect-
              native-sso-1_0.html>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Yaron Zehavi
   Raiffeisen Bank International
   Email: yaron.zehavi@rbinternational.com


   Henrik Kroll
   Raiffeisen Bank International
   Email: henrik.kroll@rbinternational.com


   Grese Hyseni
   Raiffeisen Bank International
   Email: grese.hyseni@rbinternational.com
